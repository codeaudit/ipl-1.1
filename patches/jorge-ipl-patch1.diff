From 5cdfa99ed791f796160709a11258c582fc398f2f Mon Sep 17 00:00:00 2001
From: Anon Contrib <cuchifrito@users.noreply.github.com>
Date: Wed, 18 Feb 2015 17:28:40 -0500
Subject: [PATCH] Changes to build on Yosemite

---
 config/site.def.DARWIN   |   2 +-
 src/IplEdit/iplcatalog.c | 248 +++++++++++++++++++++++++++++++++++++++++++++++
 src/IplEdit/iplcatalog.h |  40 ++++++++
 3 files changed, 289 insertions(+), 1 deletion(-)
 create mode 100644 src/IplEdit/iplcatalog.c
 create mode 100644 src/IplEdit/iplcatalog.h

diff --git a/config/site.def.DARWIN b/config/site.def.DARWIN
index be54b71..69bd6cb 100644
--- a/config/site.def.DARWIN
+++ b/config/site.def.DARWIN
@@ -58,7 +58,7 @@
 #if 0
 #define SharedLibraryCmd(ldobjs,extra_flags) $(LD) -r extra_flags -o $@~ ldobjs
 #else
-#define SharedLibraryCmdDarwin(ldobjs,depobjs,rev,libname) CCDriver -dynamiclib -install_name Prefix/lib/$(AOUT) -current_version rev -compatibility_version rev -o $@~ ldobjs depobjs -flat_namespace -undefined suppress
+#define SharedLibraryCmdDarwin(ldobjs,depobjs,rev,libname) CCDriver -dynamiclib -install_name Prefix/lib/$(CPU)/$(AOUT) -current_version rev -compatibility_version rev -o $@~ ldobjs depobjs -flat_namespace -undefined suppress
 #endif
 
 #define NormalDynamicSharedLibraryTarget(libname,rev,depobjs,ldobjs)	@@\
diff --git a/src/IplEdit/iplcatalog.c b/src/IplEdit/iplcatalog.c
new file mode 100644
index 0000000..6cb4402
--- /dev/null
+++ b/src/IplEdit/iplcatalog.c
@@ -0,0 +1,248 @@
+/*
+ * Copyright 2005-2008 Theseus Research Inc., All Rights Reserved.
+ * 
+ * This file may be used under the terms of the GNU General Public
+ * License version 2.0 as published by the Free Software Foundation                                
+ * and appearing in the file LICENSE.GPL included in the packaging of
+ * this file. For commercial licensing contact info@vectaport.com
+ *
+ * This file is provided AS IS with NO WARRANTY OF ANY KIND
+ *
+ */
+
+/*
+ * IplCatalog implementation.
+ */
+
+#include <IplEdit/iplcatalog.h>
+#include <IplEdit/iplclasses.h>
+#include <IplEdit/iplcomps.h>
+#include <IplEdit/iplcreator.h>
+#if defined(ARCH_READY)
+#include <IplServ/archcomps.h>
+#endif
+#include <IplServ/iplcomps.h>
+#include <OverlayUnidraw/ovfile.h>
+#include <Unidraw/unidraw.h>
+#include <Attribute/paramlist.h>
+#include <TopoFace/topoedge.h>
+#include <TopoFace/toponode.h>
+#include <stdio.h>
+#include <stream.h>
+#include <ctype.h>
+#include <fstream.h>
+
+/*****************************************************************************/
+
+IplCatalog::IplCatalog (
+    const char* name, Creator* creator
+) : DrawCatalog(name, creator) {
+  SetCompactions(true, false, false);
+  _startsubnode = _endsubnode = nil;
+}
+
+boolean IplCatalog::Retrieve (const char* name, Component*& comp) {
+    OverlayCatalog* oldinst = OverlayCatalog::Instance();
+    OverlayCatalog::Instance(this);
+
+    if (Valid(name, comp)) {
+        _valid = true;
+
+    } else if (UnidrawFormat(name)) {
+        _valid = Catalog::Retrieve(name, comp);
+
+    } else {
+        filebuf fbuf;
+        _valid = fbuf.open(name, ios_base::in) != 0;
+
+        if (_valid) {
+	    istream in(&fbuf);
+	    const int len = BUFSIZ;
+	    char buf[len];
+
+	    char ch;
+	    while (isspace(ch = in.get())); in.putback(ch);
+	    ParamList::parse_token(in, buf, len);
+	    if (strcmp(buf, "ipledit") == 0) { 
+	      comp = new IplIdrawComp(in, name);
+	      _valid = in.good() && ((OverlayComp*)comp)->valid();
+	      if (_import) {
+		/* convert into pasteable graph */
+		
+	      }
+	    } else 
+		_valid = false;
+
+            if (_valid) {
+                Forget(comp, name);
+                Register(comp, name);
+            }
+        }
+    }
+    OverlayCatalog::Instance(oldinst);
+    return _valid;
+}
+
+OverlayComp* IplCatalog::ReadComp(const char* name, istream& in, OverlayComp* parent) {
+  OverlayComp* child = nil;
+
+  if (strcmp(name, "conn") == 0) {
+     child = new ConnComp(in, parent);
+     ConnComp* comp = (ConnComp*)child;
+     _startnode[_edge_cnt] = comp->GetStartNode();
+     _endnode[_edge_cnt] = comp->GetEndNode();
+     _startsubnode[_edge_cnt] = comp->GetStartSubNode();
+     _endsubnode[_edge_cnt] = comp->GetEndSubNode();
+     _edges[_edge_cnt] = comp;
+     _edge_cnt++;
+  }
+  
+  else if (strcmp(name, "pipe") == 0) {
+     child = new PipeComp(in, parent);
+     ((PipeComp*)child)->init_global();
+     _nodes[_node_cnt] = (PipeComp*)child;
+     _node_cnt++;
+  }
+  
+  else if (strcmp(name, "mutex") == 0 || strcmp(name, "arbiter") == 0) {
+     child = new ArbiterComp(in, parent);
+     _nodes[_node_cnt] = (ArbiterComp*)child;
+     _node_cnt++;
+  }
+  
+  else if (strcmp(name, "fork") == 0) {
+     child = new ForkComp(in, parent);
+     ((PipeComp*)child)->init_global();
+     _nodes[_node_cnt] = (ForkComp*)child;
+     _node_cnt++;
+  }
+  
+  else if (strcmp(name, "invo") == 0) {
+     child = new InvoComp(in, parent);
+     _nodes[_node_cnt] = (InvoComp*)child;
+     _node_cnt++;
+  }
+  
+#ifdef HAVE_ACE
+  else if (strcmp(name, "distant") == 0) {
+     child = new DistantComp(in, parent);
+     ((PipeComp*)child)->init_global();
+     _nodes[_node_cnt] = (DistantComp*)child;
+     _node_cnt++;
+  }
+#endif
+  
+#if defined(ARCH_READY)
+  else if (strcmp(name, "alu") == 0) {
+     child = new AluComp(in, parent);
+     _nodes[_node_cnt] = (AluComp*)child;
+     _node_cnt++;
+  }
+  
+  else if (strcmp(name, "iad") == 0) {
+     child = new IadComp(in, parent);
+     _nodes[_node_cnt] = (IadComp*)child;
+     _node_cnt++;
+  }
+  
+  else if (strcmp(name, "oad") == 0) {
+     child = new OadComp(in, parent);
+     _nodes[_node_cnt] = (OadComp*)child;
+     _node_cnt++;
+  }
+
+  else if (strcmp(name, "mem") == 0) {
+     child = new MemComp(in, parent);
+     _nodes[_node_cnt] = (MemComp*)child;
+     _node_cnt++;
+  }
+#endif
+  
+  else
+     child = OverlayCatalog::ReadComp(name, in, parent);
+    
+  return child;
+}
+
+IplCatalog* IplCatalog::_instance = nil;
+
+IplCatalog* IplCatalog::Instance() {
+  if (!_instance) {
+    if (Component::use_unidraw()) 
+      _instance = (IplCatalog*)unidraw->GetCatalog();
+    else
+      _instance = new IplCatalog("IplCatalog", new IplCreator());
+  }
+  return _instance;
+}
+
+void IplCatalog::Instance(IplCatalog* catalog) {
+  _instance = catalog;
+}
+
+void IplCatalog::graph_init(DrawIdrawComp* comps, int num_edge, int num_node) {
+  delete _startnode;
+  delete _endnode;
+  delete _startsubnode;
+  delete _endsubnode;
+  delete _edges;
+  delete _nodes;
+  _comps = comps;
+  _startnode = new int[num_edge];
+  _endnode = new int[num_edge];
+  _startsubnode = new int[num_edge];
+  _endsubnode = new int[num_edge];
+  _edges = new EdgeComp*[num_edge];
+  _nodes = new NodeComp*[num_node];
+  _num_edge = num_edge;
+  _num_node = num_node;
+  _edge_cnt = 0;
+  _node_cnt = 0;
+}
+
+void IplCatalog::graph_finish() {
+  for (int i=0; i<_num_edge; i++) {
+    int start_id = _startnode[i];
+    int end_id = _endnode[i];
+    int start_subid = _startsubnode[i];
+    int end_subid = _endsubnode[i];
+
+    if (start_id < 0 || end_id < 0)
+      _comps->AppendEdge(_edges[i]);
+
+    TopoNode* startnode = nil;
+    if (start_subid < 0 )
+      startnode = start_id < 0 ? nil : _nodes[start_id]->Node();
+    else {
+      PipeComp* subpipe = ((InvoComp*)_nodes[start_id])->find_subpipe(false /*dst*/, start_subid);
+      if (subpipe) startnode = subpipe->Node();
+      else fprintf(stderr, "unexpected trouble finding subpipe\n");
+    }
+
+    TopoNode* endnode = nil;
+    if (end_subid < 0 )
+      endnode = end_id < 0 ? nil : _nodes[end_id]->Node();
+    else {
+      PipeComp* subpipe = ((InvoComp*)_nodes[end_id])->find_subpipe(true /*src*/, end_subid);
+      if (subpipe) endnode = subpipe->Node();
+      else fprintf(stderr, "unexpected trouble finding subpipe\n");
+    }
+
+    _edges[i]->Edge()->
+      attach_nodes(startnode, endnode);
+
+    // Observer/Observable stuff  -- does this get used??
+#if defined(GRAPH_OBSERVABLES)
+    if (start_id >=0 && end_id >=0) 
+      _edges[i]->NodeStart()->attach(_edges[i]->NodeEnd());
+#endif
+  }
+  delete _startnode; _startnode = nil;
+  delete _endnode; _endnode = nil;
+  delete _startsubnode; _startsubnode = nil;
+  delete _endsubnode; _endsubnode = nil;
+  delete _edges; _edges = nil;
+  delete _nodes; _nodes = nil;
+  _comps = nil;
+}
+
diff --git a/src/IplEdit/iplcatalog.h b/src/IplEdit/iplcatalog.h
new file mode 100644
index 0000000..19f14b0
--- /dev/null
+++ b/src/IplEdit/iplcatalog.h
@@ -0,0 +1,40 @@
+/*
+ * Copyright 2005-2008 Theseus Research Inc., All Rights Reserved.
+ * 
+ * This file may be used under the terms of the GNU General Public
+ * License version 2.0 as published by the Free Software Foundation                                
+ * and appearing in the file LICENSE.GPL included in the packaging of
+ * this file. For commercial licensing contact info@vectaport.com
+ *
+ * This file is provided AS IS with NO WARRANTY OF ANY KIND
+ *
+ */
+
+/* 
+ * IplCatalog - can read and write (serialize/deserialize) components
+ */
+
+#ifndef iplcatalog_h
+#define iplcatalog_h
+
+#include <DrawServ/drawcatalog.h>
+
+class IplCatalog : public DrawCatalog {
+public:
+    IplCatalog(const char*, Creator*);
+
+    virtual boolean Retrieve (const char*, Component*&);
+    virtual OverlayComp* ReadComp(const char*, istream&, OverlayComp* =nil);
+    static IplCatalog* Instance();
+    static void Instance(IplCatalog*);
+
+    virtual void graph_init(DrawIdrawComp* comps, int num_edge, int num_node);
+    virtual void graph_finish();
+
+protected:
+    static IplCatalog* _instance;
+    int* _startsubnode;
+    int* _endsubnode;
+};
+
+#endif
-- 
2.2.1

